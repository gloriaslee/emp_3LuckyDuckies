2021-12-16, whole team, v0:
  - Learned syntax for using currentTimeMillis
  - Fixed up binSearch code using code in library
  - Jotted down observations in notes.txt
  - Created test cases to cause significant time differences from each other.
  - Added method to add values into an arraylist and maintain the sorted invariant
  
2021-12-16, Nora, v1, v2: 
  - Attempted to invoke LinSearch in SearchDriver; ran into issues with using linSearch, which requires Comparables, on the ArrayLists in SearchDriver
  - Modified LinSearch and BinSearch to use ArrayList<Integers> instead of Comparables (v2)
  - Checked again to make sure the search functions were working as expected
  - Is currently getting a strange error in which linear searching an array appears to take either 0 or 15 to 16 seconds the majority of the time
  - Error seemed to fix itself??
  
 2021-12-17, whole team, v1:
  - Established next steps: 
      make larger test cases, 
      create binary search test cases, 
      and create a method to take average of data points.
  - Created plans to create a .in file with a preset random super large array so that we don't have to waste time to generate a randomly large array.
  - Then, we will run test cases on this array.
  - Went back from v2 to v1 because of changes we made to LinSearch and BinSearch that should not have been made to the method signatures.
  
  2021-12-19, whole team, v3:
  - Made Search more efficient as a whole
  - Decided to scrap our plan for using a .in file because we didn't need to account for Random anymore
  - Tested linSearch and binSearch
  - Decided to average the linSearch and binSearch times for for every set of trials
  - Ran into the issue where Comparables can't be added (to find average)
  - Decided to scrap our plan for finding the average because the results for binSearch and linSearch are so clear cut
  - We struggled to find a substantial difference in binSearch times because of memory limits
  - Accounted for the time for each individual test case and the elapsed time in total
  - Wrote a method timing multiple searches together
  - Moved above method and method with individual cases from the main into methods and wrapper methods

2021-12-20, Nora and Ziying, v4:
  - Made a new testing method (and a wrapper method for that) to test the runtimes of worst case scenarios
  - Added preliminary results to readme.md

2020-12-20, whole team, v5:
  - Decided to scrap the method recording runtimes for multiple individual test cases
  - Modifie arguments for worst case scenario methods to only have the necessary arguments
  - Decided to use trials
  - Finished writing up readme.md
  - Checked for compliance with instructions
